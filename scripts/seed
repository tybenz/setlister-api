#!/usr/bin/env node

require( '../src/autoload.js' );
var passwordHash = require( 'password-hash' );
var Promise = require( 'bluebird' );
var inflect = require( 'i' )();
var songs = require( './data' );

var users = {
    'foobar': {
        email: 'foo@bar.com',
        password: 'foobar',
        admin: true
    }
};

var seedUsers = function() {
  var userPromises = [];

  for ( var i in users ) {
      if ( users.hasOwnProperty( i ) ) {
          var userProps = users[i];
          var hashedPassword = passwordHash.generate( userProps.password );
          var user = new User({
            admin: userProps.admin,
            email: userProps.email,
            encrypted_password: hashedPassword.split( '$' )[ 3 ],
            salt: hashedPassword.split( '$' )[ 1 ]
          })
          .save()
          .bind( { index: i } )
          .then( function ( user ) {
            users[ this.index ].model = user;

            return user;
          });

          userPromises.push( user );
      }
  }

  return Promise.all( userPromises );
}

var groups = {
    'lifepoint': {
        title: 'LifePoint',
        users: [ 'foobar' ]
    }
};

var seedGroups = function() {
  var groupPromises = [];

  for ( var i in groups ) {
    if ( groups.hasOwnProperty( i ) ) {
      var groupProps = groups[ i ];
      var group = new Group( { title: groupProps.title } )
      .save()
      .bind( { index: i } )
      .then( function( group ) {
        for ( var j = 0, len = groupProps.users.length; j < len; j++ ) {
          var userId = groupProps.users[j];

          new GroupUser( { group_id: group.id, user_id: users[ userId ].model.id } )
          .save()
          .done();
        }

        groups[ this.index ].model = group;

        return group;
      });

      groupPromises.push( group );
    }
  }

  return Promise.all( groupPromises );
}

var setlists = {
    'first': {
        title: 'First',
        group: 'lifepoint'
    }
};

var seedSetlists = function() {
  var setlistPromises = [];

  for ( var i in setlists ) {
    if ( setlists.hasOwnProperty( i ) ) {
      var setlistProps = setlists[i];
      var setlist = new Setlist( { title: setlistProps.title, group_id: groups[ setlistProps.group ].model.id } )
      .save()
      .bind( { index: i } )
      .then( function( setlist ) {
        setlists[ this.index ].model = setlist;

        return setlist;
      });

      setlistPromises.push( setlist );
    }
  }

  return Promise.all( setlistPromises );
}

var artists = {};

var seedArtists = function() {
  for ( var i = 0, len = songs.length; i < len; i++ ) {
    var song = songs[ i ];
    var artistName = song.artist;
    artists[ artistName ] = {
      name: artistName
    };
  }

  var artistPromises = [];

  for ( var i in artists ) {
    if ( artists.hasOwnProperty( i ) ) {
      var artistProps = artists[i];
      var artist = new Artist( artistProps )
      .save()
      .bind( { index: i } )
      .then( function( artist ) {
        artists[ this.index ].model = artist;

        return artist;
      });

      artistPromises.push( artist );
    }
  }

  return Promise.all( artistPromises );
}

var getLifePoint = function() {
  return new Group({ title: 'LifePoint' } ).fetch();
}

var songDict = {};

var seedSongs = function( group ) {
  var songPromises = [];

  for ( var i = 0, len = songs.length; i < len; i++ ) {
    var songProps = songs[ i ];
    var song = new Song({
      title: songProps.title,
      artist_id: artists[ songProps.artist ].model.id,
      group_id: group.id,
      license: songProps.license,
      year: songProps.year,
      key: songProps.data_key,
      text: songProps.text
    })
    .save()
    .bind( { title: songProps.title } )
    .then( function( song ) {
      var title = this.title.toLowerCase().replace( / /g, '-' );
      songDict[ title ] = song;

      return song;
    });

    songPromises.push( song );
  }

  return Promise.all( songPromises );
}

var setlistSongs = {
    '1': {
        setlist: 'first',
        song: 'our-god'
    },
    '2': {
        setlist: 'first',
        song: 'everything-glorious'
    },
    '3': {
        setlist: 'first',
        song: 'all-my-fountains'
    },
    '4': {
        setlist: 'first',
        song: 'no-one-like-you'
    }
};

var seedSetlistSongs = function() {
  var setlistSongPromises = [];

  for ( var i in setlistSongs ) {
    if ( setlistSongs.hasOwnProperty( i ) ) {
      var setlistSongProps = setlistSongs[i];
      var setlistSong = new SetlistSong({
        song_id: songDict[ setlistSongProps.song ].id,
        setlist_id: setlists[ setlistSongProps.setlist ].model.id
      })
      .save();

      setlistSongPromises.push( setlistSong );
    }
  }

  return Promise.all( setlistSongPromises );
}

seedUsers()
.then( seedGroups )
.then( seedSetlists )
.then( seedArtists )
.then( getLifePoint )
.then( seedSongs )
.then( seedSetlistSongs )
.then( function() {
  console.log( 'Import finished' );
  process.exit();
});
